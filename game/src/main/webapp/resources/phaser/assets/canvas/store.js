
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.1 (Phaser v2.6.2)


/**
 * store.
 */
function store() {
	
	Phaser.State.call(this);
	
}

/** @type Phaser.State */
var store_proto = Object.create(Phaser.State.prototype);
store.prototype = store_proto;
store.prototype.constructor = store;

store.prototype.init = function () {
	var xhr = new XMLHttpRequest(); // 아이템 전체목록
	xhr.onload = function(e) {
		if(this.readyState === 4) {
			storeItem = JSON.parse(e.target.responseText);
		}// if
	}// onload
	xhr.open("post", "/"+ctx+"/getItemList", true); // xmlHttp로 접근할컨트롤러
	xhr.send();
	
	var xhrC = new XMLHttpRequest(); // 유저 코인
	xhrC.onload = function(e) {
		if (this.readyState === 4) {
			userCoin = JSON.parse(e.target.responseText);
		}// if
	}// onload
	xhrC.open("post", "/"+ctx+"/getUserCoin", true); // xmlHttp로 접근할컨트롤러
	xhrC.send();
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#ffffff';
	
};

var stItemList = new Array();//물약 리스트
var st_textbox;
var itemdetail;				//물약설명확대컷
var itemCheck;
var potionName; 			//DB에서 받아올 것
var detailtext;				//아이템 설명 글 + 상점설명글
var st_nextst_nextbtn;		//설명넥스트버튼
var st_nobtn;				//물약살때 노버튼
var st_yesbtn;				//물약살때 에스버튼
var exit_store;				//나가기
var value;					//아이템 가격
var st_bgm1;				//상점 노래
var st_bgm2;				//물약 효과음
var moneyBox;				//유저 보유 코인 표시 박스
var userMoney;				//유저 보유 코인 표시 텍스트
var selectIndex;			//유저가 구매를 선택아이템의 인덱스
var selectItem;				//유저가 선택한 아이템 유니코드

store.prototype.create = function () {
	//store
	var store = this.add.sprite(-4.022669867620102, -2.0, 'store_background');
	store.scale.setTo(1.9590360620528051, 1.2937500250708234);
	
	//박사님
	var doctorstand = this.add.sprite(305.0, 49.0, 'doctorstand');
	doctorstand.scale.setTo(-0.46900771385154527, 0.48025946583137036);
	
	//스토에메뉴
	var store_menu = this.add.sprite(297.0, 52.0, 'store_menu_1');
	store_menu.scale.setTo(1.0535846574807652, 1.0);
	store_menu.alpha=0.9;	
	
	//대화창
	st_textbox = this.add.sprite(320.0, 433.0, 'textbox', 0);
	st_textbox.scale.setTo(1.5, 1.5);
	st_textbox_change = st_textbox.animations.add('change', [0, 1, 2], 6, true);
	st_textbox_change.play();
	st_textbox.events.onInputDown.add(goAway,this);
	
	st_yesbtn = this.game.add.button(600.0, 520.0, 'store_btn_yes',yesmove,this, 0, 1, 0, 1);
	st_yesbtn.scale.setTo(0.4, 0.4);
	st_yesbtn.visible = false;
	st_yesbtn.inputEnabled = true;
	st_yesbtn.events.onInputDown.add(yes,this);
	
	st_nobtn = this.game.add.button(665.0, 520.0, 'store_btn_no',nomove,this, 0, 1, 0, 1);
	st_nobtn.scale.setTo(0.4, 0.4);
	st_nobtn.visible = false;
	st_nobtn.inputEnabled = true;
	st_nobtn.events.onInputDown.add(exit,this);
	
	st_nextbtn = this.game.add.button(665.0, 520.0, 'store_next',downtext,this, 0, 1, 0, 1);
	st_nextbtn.scale.setTo(0.4, 0.4);
	st_nextbtn.inputEnabled = true;
	st_nextbtn.input.useHandCursor=true;
	
	//상점 나가기버튼
	exit_store = this.game.add.button(-6.0, -1.0, 'store_exit',back2, this, 0, 1, 0, 1);
	exit_store.scale.setTo(0.4, 0.4);
	exit_store.inputEnabled=true;
	exit_store.input.useHandCursor=true;
	
	//본인 아이템 버튼
	itemCheck = this.game.add.button(55.0, -1.0, 'btn_item',getMyItem, this, 0, 1, 0, 1);
	itemCheck.scale.setTo(0.4, 0.4);
	itemCheck.inputEnabled=true;
	itemCheck.input.useHandCursor=true;

	//물약1
	stItemList[0] = this.add.sprite(368.0, 110, 'store_item1');

	//물약2
	stItemList[1] = this.add.sprite(494.0, 100, 'store_item2');
	
	//물약3
	stItemList[2] = this.add.sprite(625.0, 110, 'store_item3');
	
	//물약4
	stItemList[3] = this.add.sprite(369.0, 240, 'store_item4');
	
	//물약5
	stItemList[4] = this.add.sprite(495.0, 240, 'store_item5');
	
	//물약6
	stItemList[5] = this.add.sprite(629.0, 240, 'store_item6');

	for(var i = 0; i < stItemList.length; i++)
	{
		stItemList[i].scale.setTo(0.1, 0.1);
		stItemList[i].inputEnabled=true;
		stItemList[i].input.useHandCursor=true;
		stItemList[i].events.onInputDown.add(open,this);
	}
	
	detailtext = this.game.add.text(350, 480, "ようこそ、秘密のラボへ。\n 必要なことがあったら、\n 今買ったほうがいいんだぞ。",
			{ font: "18px Arial", fill: "#000000", align: "left" });
			 // 처음 두 변수는 좌표, 다음으로 텍스트,마지막으로 폰트에 대한 부분이다.
	//text.inputEnabled = true;
	//text.events.onInputDown.add(downtext,this);
	
	moneyBox = this.add.sprite(600.0, 5.0, 'moneyText');
	moneyBox.scale.setTo(0.3, 0.25);
	moneyBox.alpha=0.9;	
	
	userMoney = this.game.add.text(655, 15, "保有金\t"+ userCoin,
			{ font: "20px Arial", fill: "#000000", align: "left" });
	userMoney.fontWeight = 700;
	
	//bgm
	st_bgm1 = this.add.audio('store_background1');
	st_bgm1.play();
	st_bgm1.loopFull();
	
};

/* --- end generated code --- */
// -- user code here --

function open(pop) {
	//alert("ss");
	// 버튼 만들어서 인비져블
	st_textbox.visible = true;
	st_textbox.inputEnabled = false;
	detailtext.visible = true;
	detailtext.reset(400, 480);
	st_nextbtn.visible = false;
	st_yesbtn.visible = true;
	st_nobtn.visible = true;
	
	//bgm
	st_bgm2 = this.add.audio('SE_POTIONSE');
	st_bgm2.play();
	st_bgm2.loopFull();

	if (pop.x === 368 && pop.y === 110) {		
		selectIndex = 0;		
	} else if (pop.x === 494 && pop.y === 100) {		
		selectIndex = 1;		
	}else if (pop.x === 625 && pop.y === 110) {
		selectIndex = 2;	
	}else if (pop.x === 369 && pop.y === 240) {		
		selectIndex = 3;
	}else if (pop.x === 495 && pop.y === 240) {		
		selectIndex = 4;
	}else if (pop.x === 629 && pop.y === 240) {
		selectIndex = 5;
	}

	for(var i = 0; i < storeItem.length; i++)
	{
		if(selectIndex != i)
		{
			stItemList[i].inputEnabled = false;
		}
	}
	value = storeItem[selectIndex].price;
	potionName = storeItem[selectIndex].itemName;

	itemdetail = this.add.sprite(250, 380, 'store_item'+(selectIndex+1));
	detailtext.setText("金貨"+value+"個のポーションです。\n" +potionName+"を買いますか？");
	itemdetail.visible = true;
	itemdetail.scale.setTo(0.2,0.2);

}

function downtext() {
	st_nextbtn.visible = false;
	st_textbox.inputEnabled = true;
	detailtext.setText("各ポーションは違う効能があるのだ。\n どんな効能があるかは自分で調べてみろ。");
}

function goAway(){
	st_textbox.visible = false;
	detailtext.visible = false;
}

function exit(){
	itemdetail.visible = false;
	st_textbox.visible = true;
	detailtext.setText("ポーションを選択してください。");
	st_yesbtn.visible=false;
	st_nobtn.visible =false;
	
	for(var i = 0; i < storeItem.length; i++)
	{
		stItemList[i].inputEnabled = true;
		stItemList[i].input.useHandCursor=true;
	}
}

function yes() {
	itemdetail.visible = false;
	
	for(var i = 0; i < storeItem.length; i++)
	{
		stItemList[i].inputEnabled = true;
		stItemList[i].input.useHandCursor=true;
	}

	detailtext.reset(350, 480);
	st_textbox.inputEnabled = true;
	if (userCoin < value) {
		detailtext.setText("金貨が足りません。");
	}else {
		userCoin -= value;//금액차감
		selectItem = storeItem[selectIndex].itemUnicode;//구매목록 추가
		
		var xhrCoin = new XMLHttpRequest(); // 코인 업데이트
		xhrCoin.onload = function(e) {
			if(this.readyState === 4) {
				
			}// if
		}// onload
		xhrCoin.open("post", "/"+ctx+"/updateTotalCoin", true); // xmlHttp로 접근할컨트롤러
		xhrCoin.send(userCoin);
		
		var xhrItem = new XMLHttpRequest(); // 아이템 전체목록
		xhrItem.onload = function(e) {
			if(this.readyState === 4) {
				
			}// if
		}// onload
		xhrItem.open("post", "/"+ctx+"/updateUserItemList", true); // xmlHttp로 접근할컨트롤러
		xhrItem.send(selectItem);
		
		detailtext.setText("ポーションの購入に成功しました。\n  残りの金貨は " +userCoin+"個です。");	
	}
	
	userMoney.visible = false;
	userMoney = this.game.add.text(655, 15, "保有金\t"+ userCoin,
			{ font: "20px Arial", fill: "#000000", align: "left" });
	
	st_yesbtn.visible = false;
	st_nobtn.visible = false;
	
}
function nomove() {
	st_bgm2.pause();
	st_bgm2.destroy(true);
}
function yesmove() {
	st_bgm2.pause();
	st_bgm2.destroy(true);
}

function getMyItem(){
	itemdetail.visible = false;
	st_yesbtn.visible = false;
	st_nobtn.visible = false;
	st_textbox.visible = true;
	st_nextbtn.visible = false;
	detailtext.visible = true;
	detailtext.reset(350, 480);
	var userItemCheck = "";
	for(var i in itemList){
		if(i % 2 == 0){
			userItemCheck += "\n";
		}
		userItemCheck += itemList[i].itemName +"	"+itemList[i].itemCount+"個";
	}
	detailtext.setText("今、保有しているアイテムはご覧のとおりです。"+ userItemCheck);
}

function back2() {
	st_bgm1.pause();
	st_bgm1.destroy(true);
	st_bgm2.destroy(true);
	var test = current_spot;
	this.game.state.start(test);
	
}
