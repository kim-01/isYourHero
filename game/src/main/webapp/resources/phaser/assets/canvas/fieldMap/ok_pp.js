//-- user code here --

/* --- start generated code --- */

//Generated by  1.5.1 (Phaser v2.6.2)
/**
 * ok_pp.
 */
function ok_pp() {
	Phaser.State.call(this);
}
/** @type Phaser.State */
var ok_pp_proto = Object.create(Phaser.State.prototype);
ok_pp.prototype = ok_pp_proto;
ok_pp.prototype.constructor = ok_pp;

var fieldCheck_plAcheck;
var fieldCheck_plBcheck;
var fieldCheck_sscheck;
var fieldCheck_lastStep;

ok_pp.prototype.init = function () {
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#ffffff';
	
	fieldCheck_plAcheck = eval(episodeKey+"_plAcheck");
	fieldCheck_plBcheck = eval(episodeKey+"_plBcheck");
	fieldCheck_sscheck = eval(episodeKey+"_sscheck");
	fieldCheck_lastStep = eval(episodeKey+"_lastStep");
};
var spop_button;//스타트 후 팝업버튼
var foki_player;//유저
var cursors;//유저이동을 위한 변수
var foki_treeG;//나무그룹
var foki_jakoL; //잡몹 그룹
var foki_rangers;//레인저 그룹
var rangers_pos = 159;//히어로들의 디폴트 Y좌표값
var foki_pines; //멀쩡한 파인애플(미구현)
var foki_red; //레드는 특별히 따로대우
var guideblue;//간단설명 블루
var foki_gbStand;//블루 스탠딩
var foki_exit;//출구
var foki_boss;//보스몹
var foki_colboxes;//충돌박스들
var foki_textbox;//블루가말하는 글에 대한 텍스트박스
var foki_surround;//최초안내용 충돌박스
var spop_window;//최초안내용 윈도우
var foki_confbox;//
var foki_confirm;
var foki_cancel;
var foki_pracheck = false;
var foki_jakotimer;//잡몹등장후 걸어오는걸 멈출 타이머
var foki_tarray = ['あ、来たか。','ひどい光景でしょ？',"他の仲間たちは"+"\n"+"これの原因である",'怪人めを探している。',"俺は彼らに加勢する。"+"\n"+"急いできて！"];
var foki_showtext; //가이드블루로 출력하는 텍스트들의 위치
var gblueT;
var gblueup;
var gblueleft;
var	foki_ask;//학습을 진행할것인지 물어본다.아직 적용할지 안할지 고민중
var foki_askingred;
var foki_askingboard;
//var foki_pracMenu;//최초의 학습 이후 selfstudy와 private lesson을 선택해서 반복진행할 수 있게 해주는 메뉴판
var foki_ToSS;//Self Study로 이동하는 버튼
var foki_ToPL;//Private Lesson으로 이동하는 버튼
var foki_sftextN;//학습이 아직 안 끝났을 때 보여주는 텍스트
var foki_sftextZ;//하나만 완료했을 때
var foki_sftextY;//학습이 모두 끝난 뒤 보여주는 텍스트
//ok_pp.prototype.preload = function () {
//	this.load.pack('images', 'assets/pack.json');
//};
var foki_descounter;
var oki_pp_bgm;
var backward_button_ok_pp;//뒤로가기 버튼

ok_pp.prototype.create = function () {
	oki_pp_bgm = this.add.audio('Battle_against_Boss');
	oki_pp_bgm.play();
	oki_pp_bgm.loopFull();
	//충돌상자로 이동경로를 제한하자. 실제 충돌상자들은 보이면 안 되기 때문에 가장 밑바닥, 제일 먼저 배치한다.
	foki_colboxes = this.add.group();
	foki_colboxes.create(700,700,'collisionBoxW',0,true);
	foki_colboxes.create(600,700,'collisionBoxW',0,true);
	foki_colboxes.create(500,700,'collisionBoxW',0,true);
	foki_colboxes.create(700,340,'collisionBoxW',0,true);
	foki_colboxes.create(600,340,'collisionBoxW',0,true);
	foki_colboxes.create(500,340,'collisionBoxW',0,true);
	foki_colboxes.create(185,475,'collisionBoxW',0,true);
	foki_colboxes.create(430,680,'collisionBoxW',0,true);
	foki_colboxes.create(390,650,'collisionBoxW',0,true);
	foki_colboxes.create(0,475,'collisionBoxW',0,true);
	foki_colboxes.create(450,380,'collisionBoxW',0,true);
	foki_colboxes.create(415,415,'collisionBoxW',0,true);
	foki_colboxes.create(0,280,'collisionBoxW',0,true);//왼쪽 중간 덩어리
	foki_colboxes.create(112,280,'collisionBoxW',0,true);
	foki_colboxes.create(224,280,'collisionBoxW',0,true);
	foki_colboxes.create(0,350,'collisionBoxW',0,true);
	foki_colboxes.create(112,350,'collisionBoxW',0,true);
	foki_colboxes.create(224,350,'collisionBoxW',0,true);
	foki_colboxes.create(0,160,'collisionBoxW',0,true);//왼쪽 맨 위 벽
	foki_colboxes.create(105,160,'collisionBoxW',0,true);
	foki_colboxes.create(210,160,'collisionBoxW',0,true);
	foki_colboxes.create(315,160,'collisionBoxW',0,true);
	foki_colboxes.create(420,160,'collisionBoxW',0,true);
	foki_colboxes.create(525,160,'collisionBoxW',0,true);
	foki_colboxes.create(260,475,'collisionBox',0,true);//
	foki_colboxes.create(260,580,'collisionBox',0,true);
	foki_colboxes.create(260,695,'collisionBox',0,true);
	foki_colboxes.create(185,475,'collisionBox',0,true);
	foki_colboxes.create(185,580,'collisionBox',0,true);
	foki_colboxes.create(185,695,'collisionBox',0,true);
	foki_colboxes.create(375,450,'collisionBox',0,true);
	foki_colboxes.create(375,550,'collisionBox',0,true);
	foki_colboxes.create(350,0,'collisionBox',0,true);
	foki_colboxes.create(70,480,'collisionBox',0,true);
	foki_colboxes.create(70,590,'collisionBox',0,true);
	foki_colboxes.create(70,700,'collisionBox',0,true);
	this.physics.enable(foki_colboxes, Phaser.Physics.ARCADE);
	foki_colboxes.setAll('body.immovable',true);
	//충돌상자 끝
	//유저를 감쌀 충돌상자가 필요해졌음 해당 충돌박스들에는 update문에서 충돌이벤트를 걸어두었다.
	foki_surround = this.add.group();
	foki_surround.create(675,700,'collisionBox',0,true);
	foki_surround.create(755,700,'collisionBox',0,true);
	this.physics.enable(foki_surround,Phaser.Physics.ARCADE);
	foki_surround.setAll('body.immovable',true);
	//충돌상자 전부 끝
	foki_exit = this.add.sprite(785.0, 700.0, 'collisionBox', 0);//출구를 생성
	this.physics.enable(foki_exit,Phaser.Physics.ARCADE);
	foki_exit.body.immovable = true;
	//end
	this.add.sprite(0.0, 0.0, 'ok_pp_map');//타일맵 호출
	foki_pines = this.add.group();//터진 파인애플들을 생성한다.
	for (var int = 0; int < 30; int++) {//완파 파인애플
		var ap = foki_pines.create(this.math.between(0,800),this.math.between(0,800),'ppapbroken2',0,true);//무작위로 맵전체에 30개 뿌리기
	}
	for (var int = 0; int < 15; int++) {//반파 파인애플
		var ap = foki_pines.create(this.math.between(0,800),this.math.between(0,800),'ppapbroken',0,true);//무작위로 맵전체에 15개 뿌리기
		ap.angle = this.math.between(-90,90);//랜덤으로 기울이게 만든다.
	}
	foki_pines.setAll('scale.x',0.3);//파인애플들 크기조절
	foki_pines.setAll('scale.y',0.3);
	//적 NPC들의 이미지를 넣는다.--------------------------------------------------------------------------------------
	if(episodeKey == 'ok_pp'){
		foki_boss = this.add.sprite(610.0, 26.0, 'buhidott', 0);
	}else{
		foki_boss = this.add.sprite(610.0, 26.0, 'jakodott', 0);
	}
	
	var foki_bossidle = foki_boss.animations.add('idle', [0,1,2], 5, true);//보스의 모션을 애니메이션으로 만들고(무한루프)
	foki_bossidle.play();//실행한다.
	this.physics.enable(foki_boss, Phaser.Physics.ARCADE);//실체부여
	foki_boss.body.immovable = true;
	foki_jakoL = this.add.group();//잡몹들을 하나의 그룹으로 묶어준다.
	var xposition = 600;
	for (var int2 = 0; int2 < 4; int2++) {//잡몹생성
		var jako = foki_jakoL.create(xposition, 309.0, 'jakodott', 9, true);
		var jakoani = jako.animations.add('pup', [9, 10, 11, 10], 5, true);
		jakoani.play();
		xposition = xposition + 40;
	}//나름 머리굴려서 만든 잡몹 4마리의 배치for문
	this.physics.enable(foki_jakoL, Phaser.Physics.ARCADE);//잡몹에 실체부여
	foki_jakoL.setAll('body.immovable',true);
	foki_jakoL.visible = false;//잡몹은 시작부터 보여주지 않을거다.
	//아군NPC들의 이미지를 넣는다.-------------------------------------------------------------------------------------
	foki_rangers = this.add.group();//히어로들을 그룹으로 묶는다.
	if (fieldCheck_sscheck && fieldCheck_plAcheck && fieldCheck_plBcheck) {
		rangers_pos = 183;
	}
	foki_rangers.create(690.0, rangers_pos, 'green', 0, true);//히어로들생성
	foki_rangers.create(624.0, rangers_pos, 'purple', 0, true);
	foki_rangers.create(717.0, rangers_pos, 'blue', 0, true);
	this.physics.enable(foki_rangers,Phaser.Physics.ARCADE);//히어로들에 실체부여
	foki_rangers.setAll('body.immovable',true);

	foki_red = this.add.sprite(653.0, rangers_pos, 'red', 0);//foki_red는 따로생성
	this.physics.enable(foki_red,Phaser.Physics.ARCADE);//foki_red에 실체부여
	foki_red.body.immovable = true;//foki_red는 움직이지 않는다.

	f_treeG = this.add.group();//나무들을 그룹으로 묶는다.
	f_treeG.create(42.0, 712.0, 'tree3',0,true);
	f_treeG.create(46.0, 635.0, 'tree3',0,true);
	f_treeG.create(47.0, 556.0, 'tree3',0,true);
	f_treeG.create(48.0, 470.0, 'tree3',0,true);
	f_treeG.create(179.0, 492.0, 'tree3',0,true);
	f_treeG.create(178.0, 619.0, 'tree3',0,true);
	f_treeG.create(182.0, 732.0, 'tree3',0,true);
	f_treeG.create(407.0, 430.0, 'tree3',0,true);
	f_treeG.create(404.0, 578.0, 'tree3',0,true);
	f_treeG.create(472.0, 670.0, 'tree3',0,true);
	f_treeG.create(639.0, 668.0, 'tree3',0,true);
	f_treeG.create(488.0, 343.0, 'tree3',0,true);
	f_treeG.create(641.0, 342.0, 'tree3',0,true);
	f_treeG.create(3.0, 300.0, 'tree3',0,true);
	f_treeG.create(125.0, 300.0, 'tree3',0,true);
	f_treeG.create(259.0, 301.0, 'tree3',0,true);
	f_treeG.create(731.0, 113.0, 'tree3',0,true);
	f_treeG.create(573.0, 117.0, 'tree3',0,true);
	f_treeG.create(357.0, 116.0, 'tree3',0,true);
	f_treeG.create(462.0, 116.0, 'tree3',0,true);
	this.physics.enable(f_treeG, Phaser.Physics.ARCADE);
	f_treeG.setAll('body.immovable',true);//그룹에 해당하는 객체들을 충돌해도 움직이지 않게 하려면 setAll함수를 이용해야 한다.

	//텍스트상자와 그 안의 텍스트를 출력합시다 =======================================================================================
	guideblue = this.add.sprite(674.0, 751.0, 'blue', 7);//가이드용 blue도 따로생성
	gblueup = guideblue.animations.add('gbup',[9,10,11,10], 5, true);
	gblueleft = guideblue.animations.add('gbup',[3,4,5,4], 5, true);
	this.physics.enable(guideblue, Phaser.Physics.ARCADE);//가이드블루가 실체를 가진다.
	if (fieldCheck_sscheck || fieldCheck_plAcheck || fieldCheck_plBcheck) {
		guideblue.visible = false;
	}
	//foki_textbox.scale.setTo(3,2);//텍스트상자 확대
	foki_gbStand = this.add.sprite(300,600,'bstand',0);
	foki_gbStand.scale.setTo(0.25,0.25);
	foki_gbStand.visible = false;
	foki_textbox = this.add.sprite(450, 600, 'textbox',0);//가이드블루의 텍스트상자
	foki_showtext = this.add.text(465, 630, foki_tarray[0], { font: "20px Arial", fill: "#000000", align: "left" });
	foki_showtext.visible=false;
	var converidle = foki_textbox.animations.add('converidle', [0, 1, 2], 5, true);
	converidle.play();
	foki_textbox.visible=false;
	guideblue.body.immovable = true;
	gblueT = this.time.create(false);//가이드블루의 퇴장타이머
	gblueT.add(2250,moveblue);
	//------------------------------------------------------------------유저의 캐릭터코드에서 받은 정보로 캐릭터를 출력
	var charcode = userCharUnicode;//남자니여자니?
	if (charcode=='male') {
		foki_player = this.add.sprite(ok_pp_lastStep.x, ok_pp_lastStep.y, 'maled', 0);	
	}else{
		foki_player = this.add.sprite(ok_pp_lastStep.x, ok_pp_lastStep.y, 'femaled', 0);
	}
	foki_player.animations.add('pleft', [3, 4, 5, 4], 5, false);
	foki_player.animations.add('pright', [6, 7, 8, 7], 5, false);
	foki_player.animations.add('pup', [9, 10, 11, 10], 5, false);
	foki_player.animations.add('pdown', [0, 1, 2, 1], 5, false);
	this.physics.enable(foki_player, Phaser.Physics.ARCADE);//플레이어 객체가 충돌크기를 가지게 설정
	cursors = this.input.keyboard.createCursorKeys(); //알아서 방향키를 지정해준다.
	this.camera.follow(foki_player);//그냥 설정만 해두면 플레이어로 설정된 객체를 잘 따라다닌다.
	this.world.setBounds(0, 0, 800, 800);//전체 월드맵의 크기를 설정한다. 앞의 0,0은 안건드려도 된다.
	foki_player.body.collideWorldBounds = true;//유저가 월드맵 밖으로 나가지 못하게 막는다.
	// surrounds에 충돌했을 경우 최초안내메시지창을 띄운다-------------------------------------------------------------
	spop_window = this.add.sprite(450,600,'instruction',0);//팝업창은 보여야한다...
	spop_window.visible = false;
	spop_button = this.add.sprite(550,710,'button',0);//버튼용 함수들 시작
	spop_button.inputEnabled = true;
	spop_button.events.onInputDown.add(wipeout, this); //마우스 클릭버튼을 누를 때에 발동
	spop_button.visible = false;
	//맵을 나가려고 할 때 물어보는 메시지 박스를 생성한다.-------------------------------------------------------------
	foki_confbox = this.add.sprite(400,600,'askpopup',0);
	//foki_confbox.scale.setTo(0.5,0.5);
	foki_confirm = this.add.sprite(600,710,'btn_yes',0);
	foki_confirm.scale.setTo(0.3,0.3);
	foki_cancel = this.add.sprite(650,710,'btn_nope',0);
	foki_cancel.scale.setTo(0.3,0.3);
	//일단 이벤트 호출이 될 때까지는 보이지 않는 상태를 유지시킨다.
	foki_confbox.visible = false;
	foki_confirm.visible = false;
	foki_cancel.visible = false;
	foki_jakotimer = this.time.create(false);
	foki_jakotimer.add(1500,stopjako);
	foki_descounter = this.time.create(false);
	foki_descounter.add(1500,stopjako);
	///////////////////////////////////////////////////////////////////////////////반복학습메뉴///////////////////////
	foki_askingboard = this.add.sprite(200,450,'Btextbox2',0); //레드의 텍스트박스
	foki_askingboard.inputEnabled = false;
	foki_askingboard.events.onInputDown.add(nexttext,this);//텍스트박스를 클릭해서 텍스트를 넘겨야지
	aboxidle = foki_askingboard.animations.add('aboxidle', [0, 1, 2], 5, true);
	aboxidle.play();// 텍스트박스의 애니메이션과 재생
	foki_askingred = this.add.sprite(-50,200,'rstand',0);//레드의 스탠딩이미지
	foki_askingred.scale.setTo(0.5,0.5);
	//레드의 텍스트-1 유저가 아직 연습을 모두 진행하지 않았을 때
	foki_sftextN = this.add.text(300, 500, selectfunction_guide[0], { font: "22px Arial", fill: "#000000", align: "left" });
	//레드의 텍스트-2 유저가 두 연습을 모두 진행했을 때
	foki_sftextY = this.add.text(300, 500, repeatstudy[0], { font: "22px Arial", fill: "#000000", align: "left" });
	foki_sftextZ = this.add.text(300, 500, onprogress[0], { font: "22px Arial", fill: "#000000", align: "left" });
	foki_askingboard.visible = false;//일단 다 안 보이게
	foki_askingred.visible = false;
	foki_sftextN.visible=false;
	foki_sftextY.visible=false;
	foki_sftextZ.visible=false;
};//create 종료
ok_pp.prototype.update = function () {
	foki_player.body.velocity.set(0);//유저의 속도는 키 입력이 없을 시 항상 0이어야만 한다.
	if (cursors.left.isDown)
	{   foki_player.body.velocity.x = -200;
	foki_player.play('pleft');
	}
	else if (cursors.right.isDown)
	{   foki_player.body.velocity.x = 200;
	foki_player.play('pright');
	}
	else if (cursors.up.isDown)
	{   foki_player.body.velocity.y = -200;
	foki_player.play('pup');
	}
	else if (cursors.down.isDown)
	{   foki_player.body.velocity.y = 200;
	foki_player.play('pdown');
	}
	else
	{   foki_player.animations.stop();//키 입력이 없으면 애니메이션도 멈춰야만 한다.
	}
	//각종 충돌이벤트에 대한 설정
	this.game.physics.arcade.collide(foki_player, f_treeG);//유저와 나무
	this.game.physics.arcade.collide(foki_player, foki_pines);//유저와 파인애플들(미구현)
	this.game.physics.arcade.collide(foki_player, foki_red, start, null, this);//유저와 레드레인저
	this.game.physics.arcade.collide(foki_player, foki_rangers, showbox);//유저와 레드제외 다른 레인저들
	this.game.physics.arcade.collide(foki_player, foki_colboxes);//유저와 충돌상자(이동범위제한)
	this.game.physics.arcade.collide(foki_player, foki_surround, colevent, null, this);//유저와 최초도움말 트리거용 충돌상자
	this.game.physics.arcade.collide(foki_player, guideblue, convers);//유저와 가이드용 블루
	this.game.physics.arcade.collide(foki_player, foki_exit, escape, null, this);//유저와 필드의 출구
	this.game.physics.arcade.collide(foki_player, foki_boss, battle, null, this);//유저와 필드보스
	this.game.physics.arcade.collide(foki_rangers, foki_jakoL,stopjako, null, this);//레인져그룹과 잡몹그룹
};//update 종료

//보스와의 충돌에서 호출되는 함수---------------------------------------------------------
function battle(){
	oki_pp_bgm.stop();
		this.game.state.start("boss");
}
//최초 도움말과 관련된 함수-------------------------------------------------------------
function colevent(){//보이게 한다.
//	this.camera.shake(0.01, 1000);
	spop_window.visible = true;
	spop_button.visible = true;
}
function wipeout(botan){//최초 한번만 필요하니까 없애버린다.
	spop_window.destroy(true);
	foki_surround.destroy(true);
	botan.destroy(true);
}
//가이드용 블루의 간단설명부터 퇴장까지의 함수-------------------------------------------------
function convers(){//블루와 충돌하면 스탠딩 이미지와 메시지박스가 출력된다.
	foki_gbStand.visible = true;
	foki_textbox.visible = true;
	foki_textbox.inputEnabled = true;
	foki_showtext.visible = true;
	foki_textbox.events.onInputDown.add(foki_showtexts);//메시지박스에 클릭이벤트 설정
}
var guidecount1 = 1;
function foki_showtexts(){//메시지박스 클릭으로 호출될때마다 설정된 텍스트의 배열에서 한 덩어리씩 꺼내쓴다. 
	if (foki_tarray.length > guidecount1) {
		var text = foki_tarray[guidecount1];
		foki_showtext.setText(text);
		guidecount1++;
	}else{//배열에 설정된 텍스트들이 모두 사용되면 대화창과 이미지를 없애고 블루를 퇴장시키는 함수를 호출한다.
		foki_textbox.kill();
		foki_showtext.kill();
		foki_gbStand.kill();
		bluebye();
		guidecount = 1;
	}
}
function bluebye(){
	gblueleft.play();//블루가 왼쪽으로 걸어가는 애니메이션 재생(무한루프)
	guideblue.body.velocity.x = -150;
	gblueT.start();//타이머를 호출한다. 타이머는 설정된 시간 이후 아래의 moveblue를 자동으로 호출한다. 
}
function moveblue(){//타이머가 호출하는 함수로 호출되면 실행된다.
	gblueup.play();//블루가 올라가는 동작의 애니메이션 재생(무한루프)
	guideblue.body.velocity.x = 0;
	guideblue.body.velocity.y = -150;
}
//레드 이외의 레인져들과 충돌했을 때-------------------------------------------------------
function showbox(sprite){
	alert("レッドのほうに行って!");
}
//레드와 충돌했을 때의 이벤트------------------------------------------------------------
function start(){
	foki_askingboard.inputEnabled = true;
	foki_askingred.visible = true;//레드의 스탠딩과 대화상자를 보이게 한다.
	foki_askingboard.visible = true;
	if (fieldCheck_sscheck && fieldCheck_plAcheck && fieldCheck_plBcheck) {//selfstudy와 privatelesson수행이 필요하다.
		foki_jakoL.visible = true;
		foki_player.position.y = 145;
		foki_red.position.y = 180;
		foki_rangers.setAll('position.y',180);
		foki_jakoL.setAll('body.velocity.y',-50);
		foki_jakotimer.start();		
		foki_sftextY.visible = true;
	}else if (fieldCheck_sscheck || fieldCheck_plAcheck || fieldCheck_plBcheck) {//두 학습중 하나라도 했을 경우
		ok_pp_lastStep.x = foki_player.position.x;
		ok_pp_lastStep.y = (foki_player.position.y + 5);
		foki_sftextZ.visible = true;
		foki_sftextZ.setText(onprogress[0]);
	}else{//두 학습을 진행하지 않은 상태에서 충돌시
		ok_pp_lastStep.x = foki_player.position.x;
		ok_pp_lastStep.y = (foki_player.position.y + 5);
		foki_sftextN.visible = true;
	}
}
var sfguide = 1;
function nexttext(){//레드의 텍스트상자를 클릭했을 때 진행되는 이벤트
	if (fieldCheck_sscheck && fieldCheck_plAcheck && fieldCheck_plBcheck) {//모든 학습을 진행했을 경우
		if (repeatstudy.length > sfguide) {
			var text = repeatstudy[sfguide];
			foki_sftextY.setText(text);
			sfguide++;
		}else{//모든학습 진행자가 텍스트 끝까지 봤다면
			foki_sftextY.visible=false;
			foki_ToPL = this.add.button(300, 535, 'plbutton',selectPL, this,1,0,1,0);
			foki_ToPL.scale.setTo(0.3,0.3);
			foki_ToSS = this.add.button(300, 490, 'ssbutton',selectSS, this,1,0,1,0);
			foki_ToSS.scale.setTo(0.3,0.3);
			backwardbutton_ok_pp = this.add.button(700,550,'btn_backward',backward_ok_pp, this, 1,0,1,0);//뒤로가기버튼
			backwardbutton_ok_pp.scale.setTo(0.3,0.3);
		}
	}else if (fieldCheck_sscheck || fieldCheck_plAcheck || fieldCheck_plBcheck) {//둘중 하나의 학습만 완료했을 경우
		if (onprogress.length > sfguide) {
			var text = onprogress[sfguide];
			foki_sftextN.setText(text);
			sfguide++;
		}else{
			foki_sftextZ.visible=false;
		foki_ToPL = this.game.add.button(300, 535, 'plbutton',selectPL, this,1,0,1,0);
		foki_ToPL.scale.setTo(0.3,0.3);
		foki_ToSS = this.game.add.button(300, 490, 'ssbutton',selectSS, this,1,0,1,0);
		foki_ToSS.scale.setTo(0.3,0.3);
		backwardbutton_ok_pp = this.add.button(700,550,'btn_backward',backward_ok_pp, this, 1,0,1,0);//뒤로가기버튼
		backwardbutton_ok_pp.scale.setTo(0.3,0.3);
		}
	}else{//둘 다 완료하지 못했을 경우
		if (selectfunction_guide.length > sfguide) {
			var text = selectfunction_guide[sfguide];
			foki_sftextN.setText(text);
			sfguide++;
		}else{
			foki_sftextN.visible=false;
			foki_ToPL = this.game.add.button(300, 535, 'plbutton',selectPL, this,1,0,1,0);
			foki_ToPL.scale.setTo(0.3,0.3);
			foki_ToSS = this.game.add.button(300, 490, 'ssbutton',selectSS, this,1,0,1,0);
			foki_ToSS.scale.setTo(0.3,0.3);
			backwardbutton_ok_pp = this.add.button(700,550,'btn_backward',backward_ok_pp, this, 1,0,1,0);//뒤로가기버튼
			backwardbutton_ok_pp.scale.setTo(0.3,0.3);
		}
	}
}
function backward_ok_pp(){//뒤로가기 버튼을 눌렀을 경우에 대한 함수
	sfguide = 1;
	foki_askingred.visible = false;//레드 스탠딩
	foki_askingboard.visible = false;//레드 대화창
	foki_askingboard.inputEnabled = false;//레드 대화창 클릭가능해제
	var temp1 = selectfunction_guide[0];
	foki_sftextN.setText(temp1);//텍스트를 처음으로 돌려준다.(학습전)
	var temp2 = repeatstudy[0];
	foki_sftextY.setText(temp2);//텍스트를 처음으로 돌려준다.(학습후)
	var temp3 = onprogress[0];
	foki_sftextZ.setText(temp3);
	foki_ToPL.kill();
	foki_ToSS.kill();
	backwardbutton_ok_pp.kill();
}
//레드와의 대화이후 버튼을 클릭했다
function selectPL(){
	foki_ToPL.visible = false;
	foki_ToSS.visible = false;
	foki_ToPL.kill();
	foki_ToSS.kill();
	foki_chooseA = this.game.add.button(300,490,'scriptAbutton',selectPA,this,1,0,1,0);
	foki_chooseA.scale.setTo(0.3,0.3);
	foki_chooseB = this.game.add.button(300,535,'scriptBbutton',selectPB,this,1,0,1,0);
	foki_chooseB.scale.setTo(0.3,0.3);
}
function selectSS(){
	foki_ToPL.visible = false;
	foki_ToSS.visible = false;
	foki_ToPL.kill();
	foki_ToSS.kill();
	oki_pp_bgm.stop();
	this.game.state.start('selfStudy');
}
function selectPA(){//private lesson의 경우. 위와 동일
	oki_pp_bgm.stop();
	selectA = true;//A선택시
	this.game.state.start('privateLesson',true, false, 'A');
}
function selectPB(){//self study로 보낸다. 일단 보내면 체크변수도 변경
	oki_pp_bgm.stop();
	selectA = false;//B선택시
	this.game.state.start('privateLesson',true, false, 'B');
}
//잡몹을 정지시키는 함수. 이동을 시작하고 일정 시간이 지나면, 혹은 레인저들과 충돌했을 경우 호출된다.------------- 
function stopjako(){
	foki_jakoL.setAll('body.velocity.y',0);
}
//필드에서 나가서 다시 관광지 선택화면으로 넘어가려 할 경우 선택에 의한 함수들------------------------------
function escape(){//필드에서 나가려할때 메뉴를 출력한다
	foki_player.position.x = foki_player.position.x-10;
	foki_confbox.visible = true;
	foki_confirm.inputEnabled = true;
	foki_confirm.visible = true;
	foki_cancel.inputEnabled = true;
	foki_cancel.visible = true;
	foki_confirm.events.onInputDown.addOnce(byebye,this,0,null);
	foki_cancel.events.onInputDown.addOnce(hide,this,0,null);
}
function hide(){//위에서 cancel버튼을 클릭했을 때
	foki_confbox.visible = false;
	foki_confirm.inputEnabled = false;
	foki_confirm.visible = false;
	foki_cancel.inputEnabled = false;
	foki_cancel.visible = false;
}
function byebye(){//위에서 confirm버튼을 클릭했을 때
	oki_pp_bgm.stop();
	this.game.state.start("okinawa");
}
