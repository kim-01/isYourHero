
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.1 (Phaser v2.6.2)


/**
 * selfStudy.
 */
/* 전역 변수 설정 */
var ss_index = -1;
var ss_counter = 0;
var ss_nexttext;
var ss_text;
var ss_sbgm;
var ss_nextbtn;
var ss_timer;
var ss_stopbtn;
var ss_savebtn;
var ss_finbtn;
var ss_background;
var ss_exit;
var ss_getResult;
var isRecording = false;//recording 하는지 여부의 변수

//veriables.js확인
var ss_random_start;//렌덤으로 스테이지 정함
var ss_totalScript;//전체스크립트
/* 영어 녹음 파일  - DB에서 받아올 것 */
var ss_record;

function selfStudy() {
	
	Phaser.State.call(this);
}

/** @type Phaser.State */
var selfStudy_proto = Object.create(Phaser.State.prototype);
selfStudy.prototype = selfStudy_proto;
selfStudy.prototype.constructor = selfStudy;

selfStudy.prototype.init = function (place) {
	
	this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	this.scale.pageAlignHorizontally = true;
	this.scale.pageAlignVertically = true;
	this.stage.backgroundColor = '#ffffff';
	
	if(episodeKey == 'ok_pp' || episodeKey == 'kb_hl' || episodeKey == 'sp_sb' ||
			episodeKey == 'kt_kk' || episodeKey == 'tk_tt')
	{
		seed_max = eval(episodeKey.substring(0,2)+'_seed_max');//최대값
		seed_min = eval(episodeKey.substring(0,2)+'_seed_min');//최소값

		ss_random_start = Math.floor(Math.random() * (seed_max-seed_min) + seed_min);//렌덤으로 스테이지 정함
		ss_totalScript = totalScript.get(scriptEp[ss_random_start]);//variables.js확인
		
		ss_record = [scriptEp[ss_random_start]+'_01',scriptEp[ss_random_start]+'_02',scriptEp[ss_random_start]+'_03',
			 scriptEp[ss_random_start]+'_04',scriptEp[ss_random_start]+'_05',scriptEp[ss_random_start]+'_06'];
		
		var xhrSS = new XMLHttpRequest(); // 유저 스크립트 세션값 셋팅
		xhrSS.open("post", "/"+ctx+"/setScriptSession", true); // xmlHttp로 접근할컨트롤러
		xhrSS.send(scriptEp[ss_random_start]);
	}
	else
	{
		ss_totalScript = totalScript.get(episodeKey);//variables.js확인
		
		ss_record = [episodeKey+'_01',episodeKey+'_02',episodeKey+'_03',
			episodeKey+'_04',episodeKey+'_05',episodeKey+'_06'];
		
		var xhrSS = new XMLHttpRequest(); // 유저 스크립트 세션값 셋팅
		xhrSS.open("post", "/"+ctx+"/setScriptSession", true); // xmlHttp로 접근할컨트롤러
		xhrSS.send(episodeKey);
	}
	ss_content = ss_totalScript;
};

selfStudy.prototype.create = function () {
	//배경그림 설정  - 이전 state에서 받아온 parameter값(placeName)에 따라 변경
	ss_background = this.add.sprite(-125.0, 2.0, episodeKey+"_bg");
	ss_background.scale.setTo(1.0, 1.0);
	
	/* 스탠딩 아바타 설정 */
	var ss_pstand = this.add.sprite(470.0, 137.0, 'pstand');
	ss_pstand.scale.setTo(0.3729579490651983, 0.3659756293795315);
	
	/* 메세지 창 설정 */
	var ss_greybox = this.add.sprite(154.0, 360.0, 'popup');
	ss_greybox.scale.setTo(2.0, 1.5);
	ss_greybox.alpha = 0.8;
	
	/* 메세지 내용 설정 */
	ss_text = this.game.add.text(200, 400, "Let's start!",
			{ font: "20px Arial", fill: "#000000", align: "left" });
	
	/* 점수 표시 텍스트 */
	ss_getResult = this.game.add.text(680,370, "");
	ss_getResult.visible = false;
	
	/* 메세지 변경하는 버튼 */
	ss_nexttext = this.game.add.button(660, 530,'btn_next', ss_addIndex, this, 0, 1, 0, 1);
	ss_nexttext.scale.setTo(0.4, 0.4);	
	ss_nexttext.inputEnabled = true;//텍스트가 클릭(이벤트)에 반응하도록 만든다.
	
	/* 녹음 버튼 설정 */
	ss_savebtn = this.game.add.button(600.0, 530.0, '146x155 button', ss_recordSave, this, 0, 1, 0, 1);
	ss_savebtn.scale.setTo(0.4, 0.4);
	ss_savebtn.visible = false;
	ss_savebtn.inputEnabled = true;//텍스트가 클릭(이벤트)에 반응하도록 만든다.
	
	/* 나가기 버튼 */
	ss_exit = this.game.add.button(1.0, 1.0, 'store_exit',ss_backToMiniMap, this, 0, 1, 0, 1);
	ss_exit.scale.setTo(0.4, 0.4);
	ss_exit.inputEnabled=true;
	ss_exit.input.useHandCursor=true;
	
	/* 다음 페이지로 가는 버튼 설정 */
	ss_nextbtn = this.game.add.button(660.0, 530.0, 'btn_next', ss_toNxtStage, this, 0, 1, 0, 1);
	ss_nextbtn.scale.setTo(0.4, 0.4);
	ss_nextbtn.visible = false;
	ss_nextbtn.inputEnabled = true;//텍스트가 클릭(이벤트)에 반응하도록 만든다.
};

selfStudy.prototype.update = function () {
	/* 음원파일 재생 + 재생 끝나면 함수 발동 */
	ss_sbgm = this.add.audio(ss_record[ss_index+1]);
	ss_sbgm.onStop.add(ss_showButton, this);
	
	this.game.debug.text("カウント: " + this.game.time.events.duration, 60, 32);
	
};

/* ss_nextbtn 버튼 클릭시 인덱스 하나씩 늘리는 함수  */
function ss_addIndex(item) {
	ss_getResult.visible = false;
    if(ss_index < 6) {
        ss_index++;
        ss_changeText(ss_index);
    } else {
        ss_index = 0;
    }
}

/* 메세지 내용 변경 + 다음 음원파일 재생 함수 */
function ss_changeText(item){
	var ss_textSpilt = ss_minFifth(ss_content[item]);
	ss_text.setText(ss_textSpilt);
	ss_playAudio(item);
	
	if(item == 5){
		ss_nexttext.visible = false;
	}
}

function ss_minFifth(str) {
    var ss_lengthFlag = false;
	var strArr = "";
    var ss_textArray = new Array();
    ss_textArray = str.split(/[.。]+/);
    
    for(var i in ss_textArray){
    	var regexp = /[A-Z]/gi;
    	if(ss_textArray[i].match(regexp) != null){
    		//영문 스크립트 (60자까지)
    		if(ss_textArray[i].length > 60){
        		ss_lengthFlag = false;
            	for(var i in ss_textArray){
        		    strArr += ss_textArray[i].substring(0,60);
        		    strArr += "\n";
        		    strArr += ss_textArray[i].substring(60);
            	}
        	}else{
        		strArr += ss_textArray[i];
        		strArr += "\n";
        	}
    	}else if(ss_textArray[i].match(regexp) == null){
    		//일문 스크립트 (25자까지)
    		if(ss_textArray[i].length > 24){
        		ss_lengthFlag = false;
            	for(var i in ss_textArray){
        		    strArr += ss_textArray[i].substring(0,24);
        		    strArr += "\n";
        		    strArr += ss_textArray[i].substring(24);
            	}
        	}else{
		    	strArr += ss_textArray[i];
		    	strArr += "\n";
		    }
    	}else{
    		ss_lengthFlag = true;
    	}
    }

    if(ss_lengthFlag == false){
    	return strArr;
    }else{
    	return str;
    }
}

/* 음원파일 재생 함수 */
function ss_playAudio(){
	ss_sbgm.play();
	if(ss_sbgm.isPlaying){
		ss_savebtn.visible = false;
		ss_nexttext.visible = false;
	}
}

/* 음원파일 재생 후 녹음버튼, 녹음정지버튼 활성화 */
function ss_showButton(){
	ss_savebtn.visible = true;
}

/* 녹음 함수 : 연결해야함 */
function ss_recordSave(){
	if(isRecording == false)
	{
		var xhrSS = new XMLHttpRequest(); // 유저 스크립트 세션값 셋팅
		xhrSS.open("post", "/"+ctx+"/setScriptTarget", true); // xmlHttp로 접근할컨트롤러
		xhrSS.send((ss_index+1));
		isRecording = true;
		toggleRecording();
	}
	else
	{
		isRecording = false;
		toggleRecording();
		  var xhr=new XMLHttpRequest();
		  xhr.onload=function(e) {
		      if(this.readyState === 4) {
		    	  analysis_score = e.target.responseText;
		      }
		  };
		  xhr.open("POST","/"+ctx+"/getScore",true);
		  xhr.send();
		  
		//5초뒤에 실행되도록 함 
		this.game.time.events.add(Phaser.Timer.SECOND * 5, ss_recordStop, this);
	}
}

/* 음원파일 재생후 ss_nextbtn버튼 활성화 시키는 함수 */
function ss_recordStop(){
	ss_getResult.setText(analysis_score+"点");
	if(ss_index == 5){
		ss_savebtn.destroy(true);
		ss_getResult.visible = true;
		ss_nextbtn.visible = true;
	}else{
		ss_savebtn.visible = false;
		ss_getResult.visible = true;
		ss_nexttext.visible = true;
	}
}

/* 음원파일 재생후 ss_nextbtn버튼 활성화 시키는 함수 */
function ss_showNextButton(){
	ss_savebtn.visible = false;
	ss_nexttext.visible = true;
}

/* 마지막 녹음정지 함수 */
function ss_endRecording(){
	ss_savebtn.destroy(true);
	ss_nextbtn.visible = true;
}

/* 화면 전환 함수 - 게임 중도 포기시 */
function ss_backToMiniMap(){
	// 전역변수 초기화
	ss_index = -1;
	ss_counter = 0;
	
	if(episodeKey == 'tk_tt'){
		this.game.state.start('tk_tt');
	}else if(episodeKey == 'ok_pp') {
		this.game.state.start('ok_pp');
	}else{
		this.game.state.start('fieldModule');
	}
}

/* 화면 전환 함수  - 클리어시 */
function ss_toNxtStage(){
	// 전역변수 초기화
	ss_index = -1;
	ss_counter = 0;
	
	// DB에 클리어 여부 저장
	var ss_clearResult = episodeKey+"S";
	
	var xhrResult = new XMLHttpRequest(); // 아이템 전체목록
	xhrResult.onload = function(e) {
		if(this.readyState === 4) {
			
		}// if
	}// onload
	xhrResult.open("post", "/"+ctx+"/updateUserStudy", true); // xmlHttp로 접근할컨트롤러
	xhrResult.send(ss_clearResult);
	
	if(episodeKey == 'tk_tt'){
		this.game.state.start('tk_tt');
	}else if(episodeKey == 'ok_pp') {
		this.game.state.start('ok_pp');
	}else{
		this.game.state.start('fieldModule');
	}
}